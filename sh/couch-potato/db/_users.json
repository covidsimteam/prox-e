{"new_edits":false,"docs":[
{"_id":"_design/_auth","_rev":"1-753ae0157a8b1a22339f3c0ef4f1bf19","language":"javascript","validate_doc_update":"\n    function(newDoc, oldDoc, userCtx, secObj) {\n        if (newDoc._deleted === true) {\n            // allow deletes by admins and matching users\n            // without checking the other fields\n            if ((userCtx.roles.indexOf('_admin') !== -1) ||\n                (userCtx.name == oldDoc.name)) {\n                return;\n            } else {\n                throw({forbidden: 'Only admins may delete other user docs.'});\n            }\n        }\n\n        if (newDoc.type !== 'user') {\n            throw({forbidden : 'doc.type must be user'});\n        } // we only allow user docs for now\n\n        if (!newDoc.name) {\n            throw({forbidden: 'doc.name is required'});\n        }\n\n        if (!newDoc.roles) {\n            throw({forbidden: 'doc.roles must exist'});\n        }\n\n        if (!isArray(newDoc.roles)) {\n            throw({forbidden: 'doc.roles must be an array'});\n        }\n\n        for (var idx = 0; idx < newDoc.roles.length; idx++) {\n            if (typeof newDoc.roles[idx] !== 'string') {\n                throw({forbidden: 'doc.roles can only contain strings'});\n            }\n        }\n\n        if (newDoc._id !== ('org.couchdb.user:' + newDoc.name)) {\n            throw({\n                forbidden: 'Doc ID must be of the form org.couchdb.user:name'\n            });\n        }\n\n        if (oldDoc) { // validate all updates\n            if (oldDoc.name !== newDoc.name) {\n                throw({forbidden: 'Usernames can not be changed.'});\n            }\n        }\n\n        if (newDoc.password_sha && !newDoc.salt) {\n            throw({\n                forbidden: 'Users with password_sha must have a salt.' +\n                    'See /_utils/script/couch.js for example code.'\n            });\n        }\n\n        var available_schemes = [\"simple\", \"pbkdf2\", \"bcrypt\"];\n        if (newDoc.password_scheme\n                && available_schemes.indexOf(newDoc.password_scheme) == -1) {\n            throw({\n                forbidden: 'Password scheme `' + newDoc.password_scheme\n                    + '` not supported.'\n            });\n        }\n\n        if (newDoc.password_scheme === \"pbkdf2\") {\n            if (typeof(newDoc.iterations) !== \"number\") {\n               throw({forbidden: \"iterations must be a number.\"});\n            }\n            if (typeof(newDoc.derived_key) !== \"string\") {\n               throw({forbidden: \"derived_key must be a string.\"});\n            }\n        }\n\n        var is_server_or_database_admin = function(userCtx, secObj) {\n            // see if the user is a server admin\n            if(userCtx.roles.indexOf('_admin') !== -1) {\n                return true; // a server admin\n            }\n\n            // see if the user a database admin specified by name\n            if(secObj && secObj.admins && secObj.admins.names) {\n                if(secObj.admins.names.indexOf(userCtx.name) !== -1) {\n                    return true; // database admin\n                }\n            }\n\n            // see if the user a database admin specified by role\n            if(secObj && secObj.admins && secObj.admins.roles) {\n                var db_roles = secObj.admins.roles;\n                for(var idx = 0; idx < userCtx.roles.length; idx++) {\n                    var user_role = userCtx.roles[idx];\n                    if(db_roles.indexOf(user_role) !== -1) {\n                        return true; // role matches!\n                    }\n                }\n            }\n\n            return false; // default to no admin\n        }\n\n        if (!is_server_or_database_admin(userCtx, secObj)) {\n            if (oldDoc) { // validate non-admin updates\n                if (userCtx.name !== newDoc.name) {\n                    throw({\n                        forbidden: 'You may only update your own user document.'\n                    });\n                }\n                // validate role updates\n                var oldRoles = (oldDoc.roles || []).sort();\n                var newRoles = newDoc.roles.sort();\n\n                if (oldRoles.length !== newRoles.length) {\n                    throw({forbidden: 'Only _admin may edit roles'});\n                }\n\n                for (var i = 0; i < oldRoles.length; i++) {\n                    if (oldRoles[i] !== newRoles[i]) {\n                        throw({forbidden: 'Only _admin may edit roles'});\n                    }\n                }\n            } else if (newDoc.roles.length > 0) {\n                throw({forbidden: 'Only _admin may set roles'});\n            }\n        }\n\n        // no system roles in users db\n        for (var i = 0; i < newDoc.roles.length; i++) {\n            if (newDoc.roles[i] !== '_metrics') {\n              if (newDoc.roles[i][0] === '_') {\n                  throw({\n                      forbidden:\n                      'No system roles (starting with underscore) in users db.'\n                  });\n              }\n            }\n        }\n\n        // no system names as names\n        if (newDoc.name[0] === '_') {\n            throw({forbidden: 'Username may not start with underscore.'});\n        }\n\n        var badUserNameChars = [':'];\n\n        for (var i = 0; i < badUserNameChars.length; i++) {\n            if (newDoc.name.indexOf(badUserNameChars[i]) >= 0) {\n                throw({forbidden: 'Character `' + badUserNameChars[i] +\n                        '` is not allowed in usernames.'});\n            }\n        }\n    }\n"},
{"_id":"org.couchdb.user:aayush","_rev":"3-f4f2d167fe2f011421c1a3f479655a21","name":"aayush","type":"user","roles":["researcher"],"password_scheme":"pbkdf2","iterations":10,"derived_key":"9aa19e0e4e07f2166c9e35bcc3ad53a50f1fc4a7","salt":"379e3d9280705db1ac9ea510c651fc00"},
{"_id":"org.couchdb.user:kripa","_rev":"1-8c0c33ad706690a01da77e2ff05d4f79","name":"kripa","type":"user","roles":["public"],"password_scheme":"pbkdf2","iterations":10,"derived_key":"29c31e5c1213358f1128ea6b2c48a820302863d2","salt":"ab14f6aa393b11dc4c6920769c0c688e"},
{"_id":"org.couchdb.user:lalitpurcictcontacttracer@nep.work","_rev":"2-46ec87468d366ceb6ab0e6b4d6763bd2","name":"lalitpurcictcontacttracer@nep.work","type":"user","roles":["lalitpur_cict_contact_tracer"],"password_scheme":"pbkdf2","iterations":10,"derived_key":"ccab71d4cb288d53ecbf9aa12bfd31b3e01e7f8b","salt":"58fbba3d689eca6376e5450157858592"},
{"_id":"org.couchdb.user:lalitpurcictinvestigator@nep.work","_rev":"2-366c43fade089a2729f8fbea5e54fdb5","name":"lalitpurcictinvestigator@nep.work","type":"user","roles":["lalitpur_cict_investigator"],"password_scheme":"pbkdf2","iterations":10,"derived_key":"b6c629660f229680a440b7cb34f519c57a96599e","salt":"d81584c15acac44458310a75a388b4f1"},
{"_id":"org.couchdb.user:lalitpurlabadmin@nep.work","_rev":"2-3d98292987b963d52e37a17a6194172b","name":"lalitpurlabadmin@nep.work","type":"user","roles":["lalitpur_lab_admin"],"password_scheme":"pbkdf2","iterations":10,"derived_key":"a958abb500022fce0b434d8c71954fdb45cad636","salt":"18cc8a3a6e2c53773483ef20c4129253"},
{"_id":"org.couchdb.user:lalitpurlabreporter@nep.work","_rev":"3-7ff1b1a5e5c09f31c3f505b25a92ad48","name":"lalitpurlabreporter@nep.work","type":"user","roles":["lalitpur_lab_reporter","lalitpur_lab_sample_collector","lalitpur_field_sample_collector"],"password_scheme":"pbkdf2","iterations":10,"derived_key":"fb1f8fdab03f41def573d19dd2d97df08e5dfa11","salt":"ae00601754751a941e87665efb918ad6"},
{"_id":"org.couchdb.user:lalitpurlabsamplecollector@nep.work","_rev":"2-f1ab2b7537fc200fb041080e1cf2f349","name":"lalitpurlabsamplecollector@nep.work","type":"user","roles":["lalitpur_lab_sample_collector"],"password_scheme":"pbkdf2","iterations":10,"derived_key":"a38ee01d544a1fda2883a12de4ca85fa82923bc4","salt":"addada78dda583eff4ed3a96b0a91c96"},
{"_id":"org.couchdb.user:lalitpurmunicadmin@nep.work","_rev":"2-8caeaacfc6661945e42cf856ef5027e2","name":"lalitpurmunicadmin@nep.work","type":"user","roles":["lalitpur_municipality_admin"],"password_scheme":"pbkdf2","iterations":10,"derived_key":"931713bca3625d62f16850eda6741cb01acc82b1","salt":"b643f85233d78b9f5fa72ee7977d84c5"},
{"_id":"org.couchdb.user:lalitpurmunicofficer@nep.work","_rev":"2-14dae9a1d6428f310b07936f610555aa","name":"lalitpurmunicofficer@nep.work","type":"user","roles":["lalitpur_municipality_officer"],"password_scheme":"pbkdf2","iterations":10,"derived_key":"3d1825834e232ff05b91cc85dbe3ed10db9b11a6","salt":"854d1a668a807375329164e9565bc4d2"},
{"_id":"org.couchdb.user:open@nep.work","_rev":"1-fc277f01b9a94b2fc69a7aff0b23811b","name":"open@nep.work","type":"user","roles":["open"],"password_scheme":"pbkdf2","iterations":10,"derived_key":"b37f8c0c3095ef3f3345cd476dede258dfbd758c","salt":"24508c61d30b38ff1fcb73889f4e360c"},
{"_id":"org.couchdb.user:public","_rev":"1-819a012fa2b56aff07ad6a8eba17e517","name":"public","type":"user","roles":["public"],"password_scheme":"pbkdf2","iterations":10,"derived_key":"bba186e9e1803fc89a91296c752b2ddf7bad5c72","salt":"37cb9953e81ee54e95729b96edb5cc66"},
{"_id":"org.couchdb.user:risav","_rev":"1-f5258dcc87e9e2314c154eaf35bc7169","name":"risav","type":"user","roles":["reader"],"password_scheme":"pbkdf2","iterations":10,"derived_key":"2bb8eae29e1f98f2b8dd8a3dae7d06e6516fd71c","salt":"b904b0a888a409a874ba38d1ca04df8c"}
]}
